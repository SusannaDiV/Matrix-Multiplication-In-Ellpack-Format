void matr_mult_ellpack(const void* a, std::vector<double> &b, void* result) {
    EllpackMatrix* r = static_cast<EllpackMatrix*>(result);
    const EllpackMatrix* ax = static_cast<const EllpackMatrix*>(a);
    r->height = ax->height;
    float** r_values = new float*[ax->height]();
    uint64_t** r_indices = new uint64_t*[ax->height]();
    uint64_t* r_row_lengths = new uint64_t[ax->height]();
    float* r_row_values = new float[ax->height]();
    uint64_t* r_row_indices = new uint64_t[ax->height]();
    uint64_t max_width = 0;

    if (!r_values || !r_indices || !r_row_lengths) {
        r->height = 0;
    }

    for (uint64_t r_row_i = 0; r_row_i < r->height; r_row_i++) {
        uint64_t r_column_counter = 0;
        uint64_t a_column_i = 0;
        uint64_t b_column_i = 0;
        float res_sum = 0.0F;

        while (a_column_i < ax->width && b_column_i < vector.size()) {
            if (indeces[r_row_i * ax->width + a_column_i] == b_column_i) {
                res_sum += values[r_row_i * ax->width + a_column_i] * vector[b_column_i];
                a_column_i++;
                b_column_i++;
            } else if (indeces[r_row_i * ax->width + a_column_i] > b_column_i) {
                b_column_i++;
            } else {
                a_column_i++;
            }
        }

        if (res_sum != 0.0) {
            r_row_values[r_column_counter] = res_sum;
            r_column_counter++;
        }

        if (r_column_counter > max_width) {
            max_width = r_column_counter;
        }

        r_values[r_row_i] = new float[r_column_counter]();
        r_indices[r_row_i] = new uint64_t[r_column_counter]();

        if (!r_values[r_row_i] || !r_indices[r_row_i]) {
            r->height = r_row_i + 1;
            break;
        }

        memcpy(r_values[r_row_i], r_row_values, sizeof(float) * r_column_counter);
        memcpy(r_indices[r_row_i], r_row_indices, sizeof(uint64_t) * r_column_counter);
        r_row_lengths[r_row_i] = r_column_counter;
    }

    r->width = max_width;

    r->values = new float[r->height * r->width]();
    r->indices = new uint64_t[r->height * r->width]();
    if (r->values && r->indices) {
        for (uint64_t x_row_i = 0; x_row_i < r->height; x_row_i++) {
            memcpy(r->values + x_row_i * r->width, r_values[x_row_i], r_row_lengths[x_row_i] * sizeof(float));
            memcpy(r->indices + x_row_i * r->width, r_indices[x_row_i], r_row_lengths[x_row_i] * sizeof(uint64_t));
        }
    }
    for (uint64_t x_xow_i = 0; x_xow_i < r->height; x_xow_i++) {
        delete[] r_values[x_xow_i];
        delete[] r_indices[x_xow_i];
    }
    delete[] r_values;
    delete[] r_indices;

    delete[] r_row_values;
    delete[] r_row_indices;
    
}
